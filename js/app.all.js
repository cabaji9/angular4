function TestTwoCtrl(t,e,n,o){e.value="TEST TWO!"}function TestCtrl(t,e,n,o,a){e.value="HOLA TEST ONE",e.bringData=function(t){a.getData().then(function(t){e.dataBack=t})}}!function(){"use strict";function t(){angular.element(document).ready(function(){angular.bootstrap(document,["app"])})}var e=angular.module("app",["ngRoute","ui.bootstrap","ngSanitize","ngAnalytics"]);(function(){var t=angular.injector(["ng"]),n=t.get("$http");return n.get("config.json?v2").then(function(t){var n=t.data;n.adminContext=n.backendBaseContext+"/api/",e.constant("config",n)},function(t){e.constant("config",{backendBaseContext:"http://localhost:8080/backend",adminContext:"http://localhost:8080/backend/api/"})})})().then(t)}(),function(){"use strict";function t(t,e,n){}angular.module("app").controller("appCtrl",["$rootScope","$scope","$uibModal",t])}(),function(){"use strict";angular.module("app").run(["$rootScope","$location","ngAnalyticsService",function(t,e,n){}]),angular.module("app").config(["$httpProvider",function(t){t.defaults.useXDomain=!0,delete t.defaults.headers.common["X-Requested-With"]}]),angular.module("app").config(["$routeProvider",function(t){t.when("/hello",{templateUrl:"app/test/test.html"}).when("/hello_two",{templateUrl:"app/test-two/test.html"}).otherwise({redirectTo:"/hello"})}])}();var app=angular.module("app");app.controller("TestTwoCtrl",["$rootScope","$scope","$filter","$routeParams",TestTwoCtrl]),function(){"use strict";function t(){this.success=function(t){return t.data},this.error=function(t){alert(t)}}angular.module("app").service("responseService",t)}();var app=angular.module("app");app.controller("TestCtrl",["$rootScope","$scope","$filter","$routeParams","AppService",TestCtrl]),angular.module("app").service("AppService",["$http","$sce","config","responseService","$location",function(t,e,n,o,a){var r=n.backendUrl;this.getData=function(){var e=r+"/data";return t.get(e).then(function(t){return t.data},o.error)}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
